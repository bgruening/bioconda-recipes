package:
  name: r-future
  # Note that conda versions cannot contain -, so any -'s in the version have
  # been replaced with _'s.
  version: "0.9.0"

source:
  fn: future_0.9.0.tar.gz
  url:
    - http://cran.r-project.org/src/contrib/future_0.9.0.tar.gz
    - http://cran.r-project.org/src/contrib/Archive/future/future_0.9.0.tar.gz


  # You can add a hash for the file here, like md5 or sha1
  # md5: 49448ba4863157652311cc5ea4fea3ea
  # sha1: 3bcfbee008276084cbb37a2b453963c61176a322
  # patches:
   # List any patch files here
   # - fix.patch

build:
  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: parallel, R.rsp
requirements:
  build:
    - r
    - r-globals >=0.5.0
    - r-listenv

  run:
    - r
    - r-globals >=0.5.0
    - r-listenv

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('future')" # [not win]
    - "\"%R%\" -e \"library('future')\"" # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: !!python/unicode 'https://github.com/HenrikBengtsson/future'

  license: LGPL (>= 2.1)
  summary: !!python/unicode 'A Future API for R is provided. In programming, a future is an abstraction
    for a value that may be available at some point in the future. The state of a future
    can either be unresolved or resolved. As soon as it is resolved, the value is available.
    Futures are useful constructs in for instance concurrent evaluation, e.g. multicore
    parallel processing and distributed processing on compute clusters. The purpose
    of this package is to provide a lightweight interface for using futures in R. Functions
    ''future()'' and ''value()'' exist for creating futures and requesting their values.
    An infix assignment operator ''%<=%'' exists for creating futures whose values are
    accessible by the assigned variables (as promises). This package implements the
    synchronous "lazy" and "eager" futures, and the asynchronous "multicore" future
    (not on Windows). Additional types of futures are provided by other packages enhancing
    this package.'


# The original CRAN metadata for this package was:

# Package: future
# Version: 0.9.0
# Title: A Future API for R
# Imports: listenv, globals (>= 0.5.0)
# Suggests: parallel, R.rsp
# VignetteBuilder: R.rsp
# Authors@R: c(person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# Description: A Future API for R is provided. In programming, a future is an abstraction for a value that may be available at some point in the future. The state of a future can either be unresolved or resolved. As soon as it is resolved, the value is available. Futures are useful constructs in for instance concurrent evaluation, e.g. multicore parallel processing and distributed processing on compute clusters. The purpose of this package is to provide a lightweight interface for using futures in R. Functions 'future()' and 'value()' exist for creating futures and requesting their values. An infix assignment operator '%<=%' exists for creating futures whose values are accessible by the assigned variables (as promises). This package implements the synchronous "lazy" and "eager" futures, and the asynchronous "multicore" future (not on Windows). Additional types of futures are provided by other packages enhancing this package.
# License: LGPL (>= 2.1)
# LazyLoad: TRUE
# URL: https://github.com/HenrikBengtsson/future
# BugReports: https://github.com/HenrikBengtsson/future/issues
# RoxygenNote: 5.0.1
# NeedsCompilation: no
# Packaged: 2015-12-12 01:37:50 UTC; hb
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Repository: CRAN
# Date/Publication: 2015-12-12 09:13:56

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
